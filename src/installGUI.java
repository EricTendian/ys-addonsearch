import java.io.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class installGUI extends javax.swing.JFrame {

    /** Creates new form installGUI */
    public installGUI() {
        initComponents();
    }

    /**
     * This function will copy files or directories from one location to another.
     * note that the source and the destination must be mutually exclusive. This 
     * function can not be used to copy a directory to a sub directory of itself.
     * The function will also have problems if the destination files already exist.
     * @param src -- A File object that represents the source for the copy
     * @param dest -- A File object that represents the destination for the copy.
     * @throws IOException if unable to copy.
     */
    public static void copyFiles(File src, File dest) throws IOException {
        //Check to ensure that the source is valid...
        if (!src.exists()) {
            throw new IOException("copyFiles: Can not find source: " + src.getAbsolutePath() + ".");
        } else if (!src.canRead()) { //check to ensure we have rights to the source...
            throw new IOException("copyFiles: No right to source: " + src.getAbsolutePath() + ".");
        }
        //is this a directory copy?
        if (src.isDirectory()) {
            if (!dest.exists()) { //does the destination already exist?
                //if not we need to make it exist if possible (note this is mkdirs not mkdir)
                if (!dest.mkdirs()) {
                    throw new IOException("copyFiles: Could not create directory: " + dest.getAbsolutePath() + ".");
                }
            }
            //get a listing of files...
            String list[] = src.list();
            //copy all the files in the list.
            for (int i = 0; i < list.length; i++) {
                File dest1 = new File(dest, list[i]);
                File src1 = new File(src, list[i]);
                copyFiles(src1, dest1);
            }
        } else {
            //This was not a directory, so lets just copy the file
            FileInputStream fin = null;
            FileOutputStream fout = null;
            byte[] buffer = new byte[4096]; //Buffer 4K at a time (you can change this).
            int bytesRead;
            try {
                //open the files for input and output
                fin = new FileInputStream(src);
                fout = new FileOutputStream(dest);
                //while bytesRead indicates a successful read, lets write...
                while ((bytesRead = fin.read(buffer)) >= 0) {
                    fout.write(buffer, 0, bytesRead);
                }
            } catch (IOException e) { //Error copying file... 
                IOException wrapper = new IOException("copyFiles: Unable to copy file: "
                        + src.getAbsolutePath() + "to" + dest.getAbsolutePath() + ".");
                wrapper.initCause(e);
                wrapper.setStackTrace(e.getStackTrace());
                throw wrapper;
            } finally { //Ensure that the files are closed (if they were open).
                if (fin != null) {
                    fin.close();
                }
                if (fout != null) {
                    fout.close();
                }
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileSelector = new javax.swing.JFileChooser();
        installButton = new javax.swing.JButton();
        YSpath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        YSpathButton = new javax.swing.JButton();
        addonPathButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        addonPath = new javax.swing.JTextField();
        previewPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        previewButton = new javax.swing.JButton();

        fileSelector.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setTitle("YSFligth Addon Installer");

        installButton.setText("Install!");
        installButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installButtonActionPerformed(evt);
            }
        });

        YSpath.setEditable(false);
        YSpath.setText(addonSearch.ysDir);

        jLabel1.setText("YSFlight install path:");

        YSpathButton.setText("Change path");
        YSpathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YSpathButtonActionPerformed(evt);
            }
        });

        addonPathButton.setText("Change path");
        addonPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addonPathButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Addon folder path:");
        jLabel2.setToolTipText("In this folder should be the standard YS addon folders, such as aircraft, user, scenery, etc.");

        addonPath.setEditable(false);

        previewPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        previewPanel.setVisible(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 48));
        jLabel3.setText("to be added");

        javax.swing.GroupLayout previewPanelLayout = new javax.swing.GroupLayout(previewPanel);
        previewPanel.setLayout(previewPanelLayout);
        previewPanelLayout.setHorizontalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, previewPanelLayout.createSequentialGroup()
                .addContainerGap(160, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(143, 143, 143))
        );
        previewPanelLayout.setVerticalGroup(
            previewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(previewPanelLayout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(jLabel3)
                .addContainerGap(140, Short.MAX_VALUE))
        );

        previewButton.setText("Show Preview (for aircraft addons)");
        previewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(previewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(YSpath, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addonPath, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addonPathButton)
                            .addComponent(YSpathButton)))
                    .addComponent(installButton)
                    .addComponent(previewButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(YSpath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(YSpathButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addonPathButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(addonPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(previewButton)
                .addGap(9, 9, 9)
                .addComponent(previewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(installButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void installButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installButtonActionPerformed
        if (!addonPath.getText().isEmpty() && !YSpath.getText().isEmpty()) {
            try {
                copyFiles(new File(addonPath.getText()), new File(YSpath.getText()));
                JOptionPane.showMessageDialog(this,"Your addon hsa been installed. Please restart YS to complete the installation.");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Addon installation failed. Please see error message below.\n"+ex,
                "addon installer", JOptionPane.ERROR_MESSAGE);
            }
        } else JOptionPane.showMessageDialog(this, "Please fill in your YS path and/or the addon path.",
                "addon installer", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_installButtonActionPerformed

    private void previewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewButtonActionPerformed
        previewPanel.setVisible(!previewPanel.isVisible());
        if (previewPanel.isVisible()) previewButton.setText("Hide Preview");
        else previewButton.setText("Show Preview (for aircraft addons)");
        JOptionPane.showMessageDialog(this,"to be added");
    }//GEN-LAST:event_previewButtonActionPerformed

    private void YSpathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YSpathButtonActionPerformed
        int returnVal = fileSelector.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            YSpath.setText(fileSelector.getSelectedFile().toString());
        }
    }//GEN-LAST:event_YSpathButtonActionPerformed

    private void addonPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addonPathButtonActionPerformed
        int returnVal = fileSelector.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            addonPath.setText(fileSelector.getSelectedFile().toString());
        }
    }//GEN-LAST:event_addonPathButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new installGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField YSpath;
    private javax.swing.JButton YSpathButton;
    private javax.swing.JTextField addonPath;
    private javax.swing.JButton addonPathButton;
    private javax.swing.JFileChooser fileSelector;
    private javax.swing.JButton installButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton previewButton;
    private javax.swing.JPanel previewPanel;
    // End of variables declaration//GEN-END:variables

}
